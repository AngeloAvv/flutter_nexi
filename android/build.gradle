group = "it.angelocassano.flutter_nexi"
version = "1.0-SNAPSHOT"

buildscript {
    ext.kotlin_version = "2.1.21"
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath("com.android.tools.build:gradle:8.10.0")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version")
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

rootProject.allprojects {
    repositories {
        google()
        mavenCentral()
        flatDir {
            dirs project(':flutter_nexi').file("libs")
        }
    }
}

apply plugin: "com.android.library"
apply plugin: "kotlin-android"

android {
    namespace = "it.angelocassano.flutter_nexi"

    compileSdk = 35

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11
    }

    sourceSets {
        main.java.srcDirs += "src/main/kotlin"
        test.java.srcDirs += "src/test/kotlin"
    }

    defaultConfig {
        minSdk = 21
    }

    dependencies {
        testImplementation("org.jetbrains.kotlin:kotlin-test")
        testImplementation("org.mockito:mockito-core:5.18.0")

        implementation 'com.android.support:appcompat-v7:27.1.1'
        implementation 'com.android.support.constraint:constraint-layout:1.1.3'
        implementation 'androidx.appcompat:appcompat:1.7.0'
        implementation 'com.android.volley:volley:1.2.1'
        implementation 'com.google.code.gson:gson:2.9.0'
        implementation 'com.google.android.material:material:1.11.0'
        implementation 'com.google.android.gms:play-services-wallet:16.0.1'
        implementation 'com.android.support:customtabs:27.1.1'

        api(name: 'XPaySDK_v1.4.9', ext: 'aar')
    }

    testOptions {
        unitTests.all {
            useJUnitPlatform()

            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
                outputs.upToDateWhen { false }
                showStandardStreams = true
            }
        }
    }
}
