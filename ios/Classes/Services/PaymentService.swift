// Autogenerated from Pigeon (v25.3.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Sendable?

  init(code: String, message: String?, details: Sendable?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
  }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

func deepEqualsPaymentService(_ lhs: Any?, _ rhs: Any?) -> Bool {
  let cleanLhs = nilOrValue(lhs) as Any?
  let cleanRhs = nilOrValue(rhs) as Any?
  switch (cleanLhs, cleanRhs) {
  case (nil, nil):
    return true

  case (nil, _), (_, nil):
    return false

  case is (Void, Void):
    return true

  case let (cleanLhsHashable, cleanRhsHashable) as (AnyHashable, AnyHashable):
    return cleanLhsHashable == cleanRhsHashable

  case let (cleanLhsArray, cleanRhsArray) as ([Any?], [Any?]):
    guard cleanLhsArray.count == cleanRhsArray.count else { return false }
    for (index, element) in cleanLhsArray.enumerated() {
      if !deepEqualsPaymentService(element, cleanRhsArray[index]) {
        return false
      }
    }
    return true

  case let (cleanLhsDictionary, cleanRhsDictionary) as ([AnyHashable: Any?], [AnyHashable: Any?]):
    guard cleanLhsDictionary.count == cleanRhsDictionary.count else { return false }
    for (key, cleanLhsValue) in cleanLhsDictionary {
      guard cleanRhsDictionary.index(forKey: key) != nil else { return false }
      if !deepEqualsPaymentService(cleanLhsValue, cleanRhsDictionary[key]!) {
        return false
      }
    }
    return true

  default:
    // Any other type shouldn't be able to be used with pigeon. File an issue if you find this to be untrue.
    return false
  }
}

func deepHashPaymentService(value: Any?, hasher: inout Hasher) {
  if let valueList = value as? [AnyHashable] {
     for item in valueList { deepHashPaymentService(value: item, hasher: &hasher) }
     return
  }

  if let valueDict = value as? [AnyHashable: AnyHashable] {
    for key in valueDict.keys { 
      hasher.combine(key)
      deepHashPaymentService(value: valueDict[key]!, hasher: &hasher)
    }
    return
  }

  if let hashableValue = value as? AnyHashable {
    hasher.combine(hashableValue.hashValue)
  }

  return hasher.combine(String(describing: value))
}

    

enum Environment: Int {
  case test = 0
  case production = 1
}

enum PaymentResult: Int {
  case completed = 0
  case canceled = 1
}

/// Generated class from Pigeon that represents data sent in messages.
struct PaymentRequest: Hashable {
  var alias: String
  var codTrans: String
  var amount: Int64
  var currency: String
  var secretKey: String
  var domain: String? = nil
  var environment: Environment


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PaymentRequest? {
    let alias = pigeonVar_list[0] as! String
    let codTrans = pigeonVar_list[1] as! String
    let amount = pigeonVar_list[2] as! Int64
    let currency = pigeonVar_list[3] as! String
    let secretKey = pigeonVar_list[4] as! String
    let domain: String? = nilOrValue(pigeonVar_list[5])
    let environment = pigeonVar_list[6] as! Environment

    return PaymentRequest(
      alias: alias,
      codTrans: codTrans,
      amount: amount,
      currency: currency,
      secretKey: secretKey,
      domain: domain,
      environment: environment
    )
  }
  func toList() -> [Any?] {
    return [
      alias,
      codTrans,
      amount,
      currency,
      secretKey,
      domain,
      environment,
    ]
  }
  static func == (lhs: PaymentRequest, rhs: PaymentRequest) -> Bool {
    return deepEqualsPaymentService(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashPaymentService(value: toList(), hasher: &hasher)
  }
}

private class PaymentServicePigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return Environment(rawValue: enumResultAsInt)
      }
      return nil
    case 130:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return PaymentResult(rawValue: enumResultAsInt)
      }
      return nil
    case 131:
      return PaymentRequest.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class PaymentServicePigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? Environment {
      super.writeByte(129)
      super.writeValue(value.rawValue)
    } else if let value = value as? PaymentResult {
      super.writeByte(130)
      super.writeValue(value.rawValue)
    } else if let value = value as? PaymentRequest {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class PaymentServicePigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return PaymentServicePigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return PaymentServicePigeonCodecWriter(data: data)
  }
}

class PaymentServicePigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = PaymentServicePigeonCodec(readerWriter: PaymentServicePigeonCodecReaderWriter())
}


/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol PaymentApi {
  func pay(request: PaymentRequest, completion: @escaping (Result<PaymentResult, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class PaymentApiSetup {
  static var codec: FlutterStandardMessageCodec { PaymentServicePigeonCodec.shared }
  /// Sets up an instance of `PaymentApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: PaymentApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let payChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_nexi.PaymentApi.pay\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      payChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let requestArg = args[0] as! PaymentRequest
        api.pay(request: requestArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      payChannel.setMessageHandler(nil)
    }
  }
}
